import Head from "next/head";
import { createClient } from "@supabase/supabase-js";
import { useEffect, useState } from "react";
import { Event } from "@prisma/client";
import { Card, CardHeader, CardTitle } from "~/components/ui/card";
import { Button } from "~/components/ui/button";
import { Badge } from "~/components/ui/badge";
import { UserButton } from "@clerk/nextjs";
import { User } from "lucide-react";

import { supabaseClient } from "~/utils/supabaseClient";
import { useAuth } from "@clerk/nextjs";

import DatePicker from "react-datepicker";
import "react-datepicker/dist/react-datepicker.css";

// import '~/styles/search.css';


const supabaseUrl = "http://localhost:54321";
const supabaseKey = process.env.SUPABASE_KEY;
const supabase = createClient(supabaseUrl, "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6ImFub24iLCJleHAiOjE5ODM4MTI5OTZ9.CRXP1A7WOeoJeXxjNni43kdQwgnWNReilDMblYTn_I0");
export default function Search() {
  const [searchQuery, setSearchQuery] = useState("");
  const [selectedDate, setSelectedDate] = useState(null);
  const [searchResults, setSearchResults] = useState([]);
  const [events, setEvents] = useState<Event[]>([]);
  const { userId, getToken } = useAuth();
  const [list,setList]=useState([]);

  const fetchData = async () => {
    if (!selectedDate) return;
    console.log(selectedDate, searchQuery);
    const currentSelectedDate = `${selectedDate.getFullYear()}-${(selectedDate.getMonth() + 1).toString().padStart(2, "0")}-${selectedDate.getDate().toString().padStart(2, "0")}`;
    const timestamp = selectedDate.getTime();
    const { data, error } = await supabase
      .from("Event")
      .select("*")
      .or(`teamOneName.ilike.%${searchQuery}%,teamTwoName.ilike.%${searchQuery}%`)
      .gte("createdAt", currentSelectedDate);
    //.gte("createdAt", timestamp)

    console.log(data, error, "database");
    setList(data)
  };


  return (
    <>
      <Head>
        <title>Search</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="container">
        <h1 className="text-red-400">Search Page</h1>
        <div className="filters">
          <input
            type="text"
            placeholder="Search..."
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
            className="searchInput"
          />
          <DatePicker
            selected={selectedDate}
            onChange={(date) => setSelectedDate(date)}
            showTimeSelect
            timeFormat="HH:mm"
            dateFormat="yyyy/MM/dd HH:mm"
            className="datePicker"
          />
          <Button onClick={() => fetchData()} className="searchButton">
            Search
          </Button>
        </div>

        <table>
          <thead>
          <tr>
            <td>homeTeam</td>
            <td>awayTeam</td>
            <td>teamOneName</td>

            <td>createdAt</td>
            {/* Add more table headers as needed */}
          </tr>
          </thead>
          <tbody>
          {list.map((item) => (
            <tr key={item.id}>
              <td>{item.homeTeam}</td>
              <td>{item.awayTeam}</td>
              <td>{item.teamOneName}</td>
              <td>{item.createdAt}</td>

              {/* <td>{dateToString(event.commenceTime ? event.commenceTime : new Date())}</td> */}
              {/* Add more table data cells as needed */}
            </tr>
          ))}
          </tbody>
        </table>
      </div>
    </>
  );


  // const [searchText, setSearchText] = useState('');
  // const [filterTime, setFilterTime] = useState('');
  // const [results, setResults] = useState([]);
  // const [events, setEvents] = useState<Event[]>([]);
  // const { userId, getToken } = useAuth();

  // const handleSearch = async () => {
  //   const token = await getToken({template: "supabase"});
  //   const supabase = await supabaseClient(token);
  //   const { data, error } = await supabase
  //     .from('Event')
  //     .select()
  //     .ilike('homeTeam', `%${searchText}%`)
  //     .or('awayTeam', 'ilike', `%${searchText}%`)
  //     .or('teamOneName', 'ilike', `%${searchText}%`)
  //     .eq('commerceTime', filterTime);

  //   if (error) {
  //     console.error('Error fetching data:', error);
  //   } else {
  //     setResults(data);
  //   }
  // };

  // return (
  //   <div>
  //     <h1>Commerce Search</h1>
  //     <div>
  //       <input
  //         type="text"
  //         placeholder="Search by keyword"
  //         onChange={(e) => setSearchText(e.target.value)}
  //         style={{ padding: '5px', width: '200px' }}
  //       />
  //       <DatePicker
  //         selected={filterTime}
  //         onChange={(date) => setFilterTime(date)}
  //         showTimeSelect
  //         dateFormat="yyyy-MM-dd HH:mm:ss"
  //         style={{ padding: '5px' }}
  //       />
  //       <button onClick={handleSearch} style={{ padding: '5px' }}>
  //         Search
  //       </button>
  //     </div>
  //     <ResultsTable>
  //       <thead>
  //         <tr>
  //           <th>homeTeam</th>
  //           <th>awayTeam</th>
  //           <th>teamOneName</th>
  //           {/* Add more table headers as needed */}
  //         </tr>
  //       </thead>
  //       <tbody>
  //         {results.map((result, index) => (
  //           <tr key={index}>
  //             <td>{result.homeTeam}</td>
  //             <td>{result.awayTeam}</td>
  //             <td>{result.teamOneName}</td>
  //             {/* Add more table data cells as needed */}
  //           </tr>
  //         ))}
  //       </tbody>
  //     </ResultsTable>
  //   </div>
  // );
};



