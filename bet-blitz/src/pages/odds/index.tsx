import Head from "next/head";

import { useEffect, useState } from "react";
import { Bet, BetResult, Event } from "@prisma/client";
import { Card, CardHeader, CardTitle } from "~/components/ui/card";
import { Badge } from "~/components/ui/badge";
import { Input } from "~/components/ui/input";

import { useAuth } from "@clerk/nextjs";
import { SupabaseClient, createClient } from "@supabase/supabase-js";
import BetDialog from "~/components/betDialog";
import { toast } from "~/components/ui/use-toast";
import { ToastAction } from "~/components/ui/toast";

const dateToString = (date: Date) => {
  date = new Date(date);
  let str = "";

  if (date.getHours() !== 0) {
    str += date.getHours() <= 12 ? date.getHours() : date.getHours() - 12;
  } else {
    str += "12";
  }

  str += ":";

  if (date.getMinutes() < 10) str += "0";
  str += date.getMinutes();
  str += date.getHours() >= 12 ? " PM" : " AM";

  return str;
};

export default function allOdds() {
  const [events, setEvents] = useState<Event[]>([]);
  const [query, setQuery] = useState("");
  const [supabase, setSupabase] = useState<SupabaseClient<any, "public", any>>();

  const { userId, getToken } = useAuth();

  useEffect(() => {
    const fetch = async () => {
      const supabase = createClient(
        process.env.NEXT_PUBLIC_SUPABASE_API_URL!,
        process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
      );
      const token = await getToken({ template: "supabase" });
      // const supabase = await supabaseClient(token);
      const { data, error } = await supabase.from("Event").select();

      setSupabase(supabase);
      setEvents(data as Event[]);
    };
    fetch();
  }, []);

  const handlePlaceBet = async (event: Event, amount: number) => {
    if (supabase) {
      await supabase.from("Bet").insert({
        bettorId: userId,
        gameId: event.id,
        amount,
        betResult: BetResult.IN_PROGRESS
      });

      let privateCurrencyId, curAmount;

      const privateCurrencyIdResponse = await supabase.from("Bettor").select("privateCurrencyId");
      if (privateCurrencyIdResponse.data && privateCurrencyIdResponse.data.length > 0) {
        privateCurrencyId = privateCurrencyIdResponse.data[0]?.privateCurrencyId;
      }

      const amountResponse = await supabase.from("Currency").select("amount");
      if (amountResponse.data && amountResponse.data.length > 0) {
        curAmount = amountResponse.data[0]?.amount;
      }

      if (privateCurrencyId && curAmount) {
        await supabase.from("Currency").update({
          amount: (curAmount - amount),
        }).eq("id", privateCurrencyId);

        toast({
          title: "Successfully created bet",
          description: `Game at ${dateToString(event.commenceTime!)}`,
          action: (
            <ToastAction altText={"View bets"}>View bets</ToastAction>
          ),
        });
      }
    } else {
      toast({
        title: "Error creating bet",
        description: "Please try again later"
      });
    }
  }

  return (
    <>
      <Head>
        <title>Bet Blitz</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col items-center justify-start bg-[#EEEEEE]">
        <div className="container flex flex-col items-center justify-center gap-12 px-4 py-16 ">
          <h1 className="text-5xl font-black uppercase tracking-tight text-[#222831] sm:text-[5rem]">
            Bet Blitz
          </h1>
          {events && (
            <div className="w-full max-w-xl">
              <Input
                placeholder="Search up a team"
                value={query}
                onChange={(e) => setQuery(e.currentTarget.value)}
              />
            </div>
          )}
          <div className="flex w-full flex-wrap justify-center">
            {events &&
              events
                .filter((event: Event) => {
                  if (
                    event.awayTeam?.toLowerCase().includes(query.toLowerCase()) ||
                    event.homeTeam?.toLowerCase().includes(query.toLowerCase())
                  ) {
                    return true;
                  }
                  return false;
                })
                .map((event: Event, index: number) => {
                  return (
                    <Card
                      key={`event${index}`}
                      className="relative m-8 w-80 bg-white shadow-xl"
                    >
                      <Badge className="absolute left-0 top-0 -translate-y-4 translate-x-4 p-2 shadow-md">
                        {dateToString(
                          event.commenceTime ? event.commenceTime : new Date(),
                        )}
                      </Badge>
                      <CardHeader>
                        <div className="flex flex-row items-center">
                          <CardTitle className="text-md flex-grow">
                            {event.teamOneName}
                          </CardTitle>
                          {event.teamOneOdds && event.teamOneName && (
                            <BetDialog
                              odds={event.teamOneOdds}
                              name={event.teamOneName}
                              handlePlaceBet={async (amount: number) => {
                                handlePlaceBet(event, amount);
                              }}
                            />
                          )}
                        </div>

                        <div className="flex items-center">
                          <div className="w-4 border-t border-gray-400"></div>
                          <span className="mx-4 flex-shrink font-black text-gray-400">
                            @
                          </span>
                          <div className="flex-grow border-t border-gray-400"></div>
                        </div>

                        <div className="flex flex-row items-center">
                          <CardTitle className="text-md flex-grow">
                            {event.teamTwoName}
                          </CardTitle>
                          {event.teamTwoOdds && event.teamTwoName && (
                            <BetDialog
                              odds={event.teamTwoOdds}
                              name={event.teamTwoName}
                              handlePlaceBet={async (amount: number) => {
                                handlePlaceBet(event, amount);
                              }}
                            />
                          )}
                        </div>
                      </CardHeader>
                    </Card>
                  );
                })}
          </div>
        </div>
      </main>
    </>
  );
}
